---------------------------------------------------------------------------

HTTPError                                 Traceback (most recent call last)

<ipython-input-46-1b201d52c696> in <module>
      4 count= 24
      5 for company_name in l:
----> 6     for link in search(company_name+" student careers website", tld="com", num=1, stop=1, pause=4):
      7         company_name_student_careers_link[company_name] = link
      8         print(company_name, link, count)

c:\users\shrey\appdata\local\programs\python\python37\lib\site-packages\googlesearch\__init__.py in search(query, tld, lang, tbs, safe, num, start, stop, pause, country, extra_params, user_agent, verify_ssl)
    303
    304         # Request the Google Search results page.
--> 305         html = get_page(url, user_agent, verify_ssl)
    306
    307         # Parse the response and get every anchored URL.

c:\users\shrey\appdata\local\programs\python\python37\lib\site-packages\googlesearch\__init__.py in get_page(url, user_agent, verify_ssl)
    172     cookie_jar.add_cookie_header(request)
    173     if verify_ssl:
--> 174         response = urlopen(request)
    175     else:
    176         context = ssl._create_unverified_context()

c:\users\shrey\appdata\local\programs\python\python37\lib\urllib\request.py in urlopen(url, data, timeout, cafile, capath, cadefault, context)
    220     else:
    221         opener = _opener
--> 222     return opener.open(url, data, timeout)
    223
    224 def install_opener(opener):

c:\users\shrey\appdata\local\programs\python\python37\lib\urllib\request.py in open(self, fullurl, data, timeout)
    529         for processor in self.process_response.get(protocol, []):
    530             meth = getattr(processor, meth_name)
--> 531             response = meth(req, response)
    532
    533         return response

c:\users\shrey\appdata\local\programs\python\python37\lib\urllib\request.py in http_response(self, request, response)
    639         if not (200 <= code < 300):
    640             response = self.parent.error(
--> 641                 'http', request, response, code, msg, hdrs)
    642
    643         return response

c:\users\shrey\appdata\local\programs\python\python37\lib\urllib\request.py in error(self, proto, *args)
    561             http_err = 0
    562         args = (dict, proto, meth_name) + args
--> 563         result = self._call_chain(*args)
    564         if result:
    565             return result

c:\users\shrey\appdata\local\programs\python\python37\lib\urllib\request.py in _call_chain(self, chain, kind, meth_name, *args)
    501         for handler in handlers:
    502             func = getattr(handler, meth_name)
--> 503             result = func(*args)
    504             if result is not None:
    505                 return result

c:\users\shrey\appdata\local\programs\python\python37\lib\urllib\request.py in http_error_302(self, req, fp, code, msg, headers)
    753         fp.close()
    754
--> 755         return self.parent.open(new, timeout=req.timeout)
    756
    757     http_error_301 = http_error_303 = http_error_307 = http_error_302

c:\users\shrey\appdata\local\programs\python\python37\lib\urllib\request.py in open(self, fullurl, data, timeout)
    529         for processor in self.process_response.get(protocol, []):
    530             meth = getattr(processor, meth_name)
--> 531             response = meth(req, response)
    532
    533         return response

c:\users\shrey\appdata\local\programs\python\python37\lib\urllib\request.py in http_response(self, request, response)
    639         if not (200 <= code < 300):
    640             response = self.parent.error(
--> 641                 'http', request, response, code, msg, hdrs)
    642
    643         return response

c:\users\shrey\appdata\local\programs\python\python37\lib\urllib\request.py in error(self, proto, *args)
    567         if http_err:
    568             args = (dict, 'default', 'http_error_default') + orig_args
--> 569             return self._call_chain(*args)
    570
    571 # XXX probably also want an abstract factory that knows when it makes

c:\users\shrey\appdata\local\programs\python\python37\lib\urllib\request.py in _call_chain(self, chain, kind, meth_name, *args)
    501         for handler in handlers:
    502             func = getattr(handler, meth_name)
--> 503             result = func(*args)
    504             if result is not None:
    505                 return result

c:\users\shrey\appdata\local\programs\python\python37\lib\urllib\request.py in http_error_default(self, req, fp, code, msg, hdrs)
    647 class HTTPDefaultErrorHandler(BaseHandler):
    648     def http_error_default(self, req, fp, code, msg, hdrs):
--> 649         raise HTTPError(req.full_url, code, msg, hdrs, fp)
    650
    651 class HTTPRedirectHandler(BaseHandler):

HTTPError: HTTP Error 429: Too Many Requests